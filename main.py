# -*- coding: utf-8 -*-
from translater import translate
from file_scanner import scan_directory
import decorator
import file_util
import time
import sys
from tqdm import tqdm


def trans(string):
    """
    对当前字符串进行翻译
    :param string: 待翻译的字符串
    :return:  翻译结果
    """
    # 如果待翻译为空，返回空
    if len(string.strip()) == 0:
        return ""
    # 查看第一行注释缩进的索引
    space_index = string.index('/')
    # 获得缩进，因为缩进可能是制表符，所以直接保存缩进字符
    space_content = string[0:space_index]
    # 翻译修饰之后的字符串
    trans_res = translate(decorator.before(string))
    # 添加修饰之后的翻译结果
    return decorator.after(trans_res, space_content)


def resolve(lines):
    """
    翻译字符串
    :param lines: 文件内容
    :return:
    """
    # 翻译结果
    trans_result = ""
    # 待翻译字符串
    string = ""
    # 状态为0说明在代码行， 状态为1说明在注释行
    import re
    for line in lines:
        # TODO 改成正则匹配
        # 无论是否需要翻译，将原文添加到结果中
        trans_result += line
        string += line
        # 匹配是否为注释，匹配注释前面的空字符
        res = re.findall(r"([\t| ]*/\*[\s\S]*?\*/)", string)
        if len(res) == 1:
            trans_result += trans(res[0])
            string = ""
    return trans_result


# 使用此标题进行错误恢复
first_line = "/** Generated by english-annotation-buster, Powered by Google Translate.**/\n"


def buster_english(source_dir):
    # TODO 文件太多，多进程翻译（貌似python多线程就是个渣渣）
    """
    扫描source_dir下所有的文件，然后对这些源码文件进行翻译
    :param source_dir: 项目文件夹
    :return:
    """
    # 扫描文件夹下所有文件
    files = scan_directory(source_dir)
    progress_iter = tqdm(files)
    for file_name in progress_iter:
        # 获得项目内的相对路径
        relative_file_path = file_name.lstrip(source_dir)
        # 更新进度条
        progress_iter.set_description("正在处理文件{}".format(relative_file_path))
        # 读取文件
        lines = file_util.read_file(file_name)
        # 如果扫描到文件开头是headline，则直接跳过对该文件的处理
        if len(lines) != 0 and lines[0].startswith(first_line):
            continue
        # 获取翻译结果并加上加上头部
        trans_result = first_line + resolve(lines)
        # 文件写回
        file_util.write_back(trans_result, file_name)
        # 休眠，谷歌有做限制，但是目前不知道频率是多少
        # time.sleep(10)


def print_usage():
    """
    打印使用信息
    """
    print('Usage: python main.py [path to your java source folder]')
    print('\nExamples:')
    print('\tpython main.py C:\\path\\to\\your\\java\\source\\folder')
    print('\tpython main.py /home/user/path/to/your/java/source/folder')


if __name__ == "__main__":
    # 添加对命令行的解析，如果目前用不着可以先注释它
    if len(sys.argv) < 2:
        print_usage()
        exit(1)
    source_directory = sys.argv[1]
    buster_english(source_directory)